#!/usr/bin/env bash

################################################################################
# Take your bash dotfiles with you when you ssh into a server!
#
# This script will copy your local .sshrc.d directory to the server you are sshing into (soft-linking it to ~/.sshrc.d also works).
# It will also add kubeclt bash completion and a custom prompt to the server.
# Finally, it will run "fetch_usingit" on the server, which will get the setup's reservation status via usingit API.
################################################################################


function sshrc() {
    local SSHHOME=${SSHHOME:=~}
    if [ -d $SSHHOME/.sshrc.d ]; then
        local files="$files .sshrc.d"
        # fi
        SIZE=$(tar cfz - -h -C $SSHHOME $files | wc -c)
        if [ $SIZE -gt 65536 ]; then
            echo >&2 $'.sshrc.d files must be less than 64kb\ncurrent size: '$SIZE' bytes'
            exit 1
        fi

        ssh -t "$DOMAIN" $SSHARGS "
            command -v openssl >/dev/null 2>&1 || { echo >&2 \"sshrc requires openssl to be installed on the server, but it's not. Aborting.\"; exit 1; }
            export SSHHOME=\$(mktemp -d -t .$(whoami).sshrc.XXXX)
            export SSHRCCLEANUP=\$SSHHOME
            export SETUPNAME=hvs$(echo $DOMAIN | cut -f1 -d"-" | sed 's/^hvs//')
            trap \"rm -rf \$SSHRCCLEANUP; exit\" 0
            echo $'"$(cat "$0" | openssl enc -base64)"' | tr -s ' ' $'\n' | openssl enc -base64 -d > \$SSHHOME/sshrc
            chmod +x \$SSHHOME/sshrc

            echo $'"$( cat << 'EOF' | openssl enc -base64
                if [ -r /etc/profile ]; then source /etc/profile; fi
                if [ -r ~/.bash_profile ]; then source ~/.bash_profile
                elif [ -r ~/.bash_login ]; then source ~/.bash_login
                elif [ -r ~/.profile ]; then source ~/.profile
                fi
                # Add the current time in blue at the beginning of the prompt
                export PS1="\[\033[00;31m\]\A\[\033[00m\] ${PS1}"
                export PATH=$PATH:$SSHHOME
                [ -f $SSHHOME/.sshrc.d/.bashrc ] && . $SSHHOME/.sshrc.d/.bashrc
                # Set .vimrc as the vimrc file if it exists
                if [ -r "$SSHHOME/.sshrc.d/.vimrc" ]; then export VIMINIT="source $SSHHOME/.sshrc.d/.vimrc"; fi
                # If git is installed and .gitconfig exists, set GIT_CONFIG_GLOBAL to the path of the .gitconfig file
                if command -v git &> /dev/null && [ -r "$SSHHOME/.sshrc.d/.gitconfig" ]; then export GIT_CONFIG_GLOBAL="$SSHHOME/.sshrc.d/.gitconfig"; fi
                # If connected to a remote setup, fetch the reservation status
                if [[ "$USER" == "$REMOTE_SETUP_USERNAME" ]]; then fetch_usingit; fi
EOF
                )"' | tr -s ' ' $'\n' | openssl enc -base64 -d > \$SSHHOME/sshrc.bashrc

            echo $'"$(tar czf - -h -C $SSHHOME $files | openssl enc -base64)"' | tr -s ' ' $'\n' | openssl enc -base64 -d | tar mxzf - -C \$SSHHOME
            export SSHHOME=\$SSHHOME
            echo \"$CMDARG\" >> \$SSHHOME/sshrc.bashrc
            bash --rcfile \$SSHHOME/sshrc.bashrc
            "
    else
        echo "No files in: $SSHHOME/.sshrc.d/" >&2
        exit 1
    fi
}

function sshrc_parse() {
  while [[ -n $1 ]]; do
    case $1 in
      -b | -c | -D | -E | -e | -F | -I | -i | -J | -L | -l | -m | -O | -o | -p | -Q | -R | -S | -W | -w )
        SSHARGS="$SSHARGS $1 $2"; shift ;;
      -* )
        SSHARGS="$SSHARGS $1" ;;
      *)
        if [ -z "$DOMAIN" ]; then
         DOMAIN="$1"
        else
          local SEMICOLON=$([[ "$@" = *[![:space:]]* ]] && echo '; ')
          CMDARG="$@$SEMICOLON exit"
          return;
        fi
        ;;
    esac
    shift
  done
  if [ -z $DOMAIN ]; then
    ssh $SSHARGS; exit 1;
  fi
}

command -v openssl >/dev/null 2>&1 || { echo >&2 "sshrc requires openssl to be installed locally, but it's not. Aborting."; exit 1; }
sshrc_parse "$@"
sshrc
