#!/bin/bash


# The script installs the dotfiles from the `dotfiles` directory to the home directory. It also provides options to backup, keep, or overwrite existing files.
# The script also sources the `.bashrc` file after installing the dotfiles. This is to ensure that the new dotfiles are loaded into the current shell session.
# The script also installs the `sshrc` script to the `~/.local/bin` directory. The `sshrc` script is a utility that allows you to run commands on remote servers using your local shell configuration.
# Make the script executable:
# chmod +x scripts/install

# Run the script without any arguments to install the dotfiles interactively:
# ./scripts/install

# You can also pass the  -b ,  -k , or  -o  options to backup, keep, or overwrite existing files, respectively:
# ./scripts/install -b

# The script will create a backup of the existing files in the `~/.dotfiles_backup` directory. 


# Exit on error, undefined variables, and pipe failures
set -euo pipefail

# Get script directory
SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
DOTFILES_DIR="$(dirname "$SCRIPT_DIR")/dotfiles"

DEFAULT_BACKUP_MODE="overwrite"
BACKUP_DIR="$HOME/.dotfiles_backup/$(date +%Y%m%d_%H%M%S)"
ARG_MODE=""
IS_NEW_FILE_INSTALLED=false

declare -A  MODE_ACTIONS=(
    [backup]="b"
    [keep]="k"
    [overwrite]="o"
)

declare -A LOG_COLORS=(
    [INFO]='\033[0;34m'
    [SUCCESS]='\033[0;32m'
    [WARN]='\033[1;33m'
    [ERROR]='\033[0;31m'
    [NC]='\033[0m'
)

_echo_log() { echo -e "${LOG_COLORS[$1]}[$1] $2${LOG_COLORS[NC]}"; }
_die() { _echo_log ERROR "$*"; exit 1 ;}

_check_dependencies() {
    local dependencies=(diff ln mkdir cp rm readlink realpath)
    for dep in "${dependencies[@]}"; do
        command -v "$dep" > /dev/null || _die "$dep is required but not found. Please install it and try again"
    done
}

_usage_and_exit() {
    cat << EOF
Usage: $(basename "$0") [-b|-k|-o|-h]

Install dotfiles to the home directory
If no options are provided, the script will work in interactive mode

Options:
  -b, --backup     Backup existing files before overwriting
  -k, --keep       Keep existing files, only install new files
  -o, --overwrite  Overwrite existing files without prompting
  -h, --help       Show this help message

Examples:
  $(basename "$0")          # Run in interactive mode
  $(basename "$0") -b       # Backup all existing files
  $(basename "$0") -o       # Overwrite all existing files
EOF
    exit 1
}

_parse_args() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -b|--backup)    ARG_MODE="backup"           ;;
            -k|--keep)      ARG_MODE="keep"             ;;
            -o|--overwrite) ARG_MODE="overwrite"        ;;
            -h|--help)      _usage_and_exit             ;;
            *)              _die "Invalid option: $1"   ;;
        esac
        shift
    done
}

_handle_existing_file() {
    local target="$1" action="$2"
    case "$action" in
        k|keep)      _echo_log INFO "Skipping $(basename "$target"), keeping existing file"; return 1 ;;
        o|overwrite) _echo_log INFO "Overwriting existing $target" ;;
        b|backup)
            local backup_path="$BACKUP_DIR/$(basename "$target")"
            mkdir -p "$BACKUP_DIR"
            mv "$target" "$backup_path"
            _echo_log INFO "Backed up $target to $backup_path"
            ;;
        *) _die "Invalid choice: $action. Exiting..." ;;
    esac
    return 0
}

_backup_and_link() {
    local file="$1"
    local target="$HOME/$(basename "$file")"
    local file_realpath
    local target_realpath

    # Get real paths for content comparison
    file_realpath="$(readlink -f "$file")"
    [ -L "$target" ] && target_realpath="$(readlink -f "$target")" || target_realpath="$target"

    # Skip if the target is already correctly linked
    if [ -L "$target" ] && [ "$file_realpath" = "$target_realpath" ]; then
        _echo_log INFO "Skipping $(basename "$file") - already linked correctly"
        return
    fi

    # Skip the file if it's content is identical to the source file
    if diff -q "$file" "$(readlink -f "$target")" > /dev/null 2>&1; then
        _echo_log INFO "Skipping identical file $(basename "$file")"
        return
    fi

    # If the target file exists 
    if [ -e "$target" ]; then
        case "$ARG_MODE" in
            backup|keep|overwrite) action="${MODE_ACTIONS[$ARG_MODE]}" ;;
            *)
                local prompt="File $target already exists:"
                prompt+=$'\n[o]verwrite'
                prompt+=$'\n[k]eep existing file'
                prompt+=$'\n[b]ackup and overwrite'
                prompt+=$'\nChoice [O/k/b]: '
                read -r -p "$prompt" user_choice
                # Convert the user choice to lowercase or default choice of 'keep' if user input is empty
                action="${user_choice:=$DEFAULT_BACKUP_MODE}"
                action="${action,,}"
                ;;
        esac
        
        _handle_existing_file "$target" "$action" || return
    fi

    # Create link
    _echo_log INFO "Creating symbolic link for $(basename "$file")"
    ln -sf "$file_realpath" "$target"
    IS_NEW_FILE_INSTALLED=true
}

_install_dotfiles() {
    local excluded_patterns='^(\.|\.\.|.*\.swp|.*\.swo|.*~|.*bash_env.*)$'
    for file in "$DOTFILES_DIR"/.*; do
        # Skip '.', '..', '.bash_env.*' and any backup files
        [[ "$(basename "$file")" =~ $excluded_patterns ]] && continue
        _backup_and_link "$file"
    done

    # Handle .bash_env.private separately
    if [ -f "$DOTFILES_DIR/.bash_env.public" ]; then
        if [ ! -f "$HOME/.bash_env.private" ]; then
            _echo_log WARN "Creating .bash_env.private from template.\nPlease edit ~/.bash_env.private with your personal settings"
            cp "$DOTFILES_DIR/.bash_env.public" "$HOME/.bash_env.private"
            chmod 600 "$HOME/.bash_env.private"
        else
            local public_lines private_lines
            public_lines=$(wc -l < "$DOTFILES_DIR/.bash_env.public")
            private_lines=$(wc -l < "$HOME/.bash_env.private")
            if [ "$public_lines" -gt "$private_lines" ]; then
                _echo_log WARN ".bash_env.public has been updated."
                _echo_log WARN "Please check for new variables in $DOTFILES_DIR/.bash_env.public"
                diff -u "$HOME/.bash_env.private" "$DOTFILES_DIR/.bash_env.public" || true
            fi
        fi
    fi
}

_source_bashrc() {
    if [ -f "$HOME/.bashrc" ]; then 
        if ! source "$HOME/.bashrc"; then
            _echo_log WARN "Failed to source .bashrc"
            _echo_log WARN "Please run 'source ~/.bashrc' or restart your terminal"
        else
            _echo_log SUCCESS "Sourced .bashrc successfully"
        fi
    else
        _echo_log WARN "No .bashrc found."
    fi
}

_install_sshrc() {
    local sshrc_source="$DOTFILES_DIR/../sshrc"
    local sshrc_target="$HOME/.local/bin/sshrc"

    if [ -z "$ARG_MODE" ]; then
        # Get user confirmation for sshrc installation
        read -r -p "Install sshrc? [Y/n]: " install_sshrc
        [ "${install_sshrc,,}" = "n" ] && { _echo_log INFO "Skipping sshrc installation"; return; }
    fi

    mkdir -p "$(dirname "$sshrc_target")"

    # Check if sshrc already exists and handle it accordingly
    if [ -f "$sshrc_target" ]; then
        if $(which diff) -q "$sshrc_source" "$sshrc_target" > /dev/null 2>&1; then
            _echo_log INFO "Skipping identical file sshrc"
            return
        fi

        case "$ARG_MODE" in
            backup|keep|overwrite) action="${MODE_ACTIONS[$ARG_MODE]}" ;;
            *)
                read -r -p "File $sshrc_target already exists. [O]verwrite, [k]eep, [b]ackup? " user_choice
                action="${user_choice:=$DEFAULT_BACKUP_MODE}"
                action="${action,,}"
                ;;
        esac
        _handle_existing_file "$sshrc_target" "${action}" || return
    fi

    # Install sshrc
    ln -f "$sshrc_source" "$sshrc_target"
    chmod
    _echo_log SUCCESS "Linked sshrc to $sshrc_target"
}

main() {
    # Check if running as root
    [ "$EUID" -eq 0 ] && _die "Please don't run this script as root"

    # Check dependencies
    _check_dependencies

    # Parse command line arguments
    _parse_args "$@"

    # Check if dotfiles directory exists
    [ ! -d "$DOTFILES_DIR" ] && _die "Dotfiles directory not found : $DOTFILES_DIR"

    _echo_log SUCCESS "Installing dotfiles..."
    _install_dotfiles

    $IS_NEW_FILE_INSTALLED && _source_bashrc

    _install_sshrc

    if [ -d "$BACKUP_DIR" ]; then
        _echo_log SUCCESS "Backup files are stored in $BACKUP_DIR"
        _echo_log INFO "Please review and delete them if no longer needed"
    fi
    _echo_log SUCCESS "Installation complete!"
}

# Run the main function
main "$@"
